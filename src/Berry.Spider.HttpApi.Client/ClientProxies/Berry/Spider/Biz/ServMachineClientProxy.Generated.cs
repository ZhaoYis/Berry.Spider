// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using Berry.Spider;
using Berry.Spider.Biz;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace Berry.Spider.Biz;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IServMachineAppService), typeof(ServMachineClientProxy))]
public partial class ServMachineClientProxy : ClientProxyBase<IServMachineAppService>, IServMachineAppService
{
    public virtual async Task<ServMachineDto> GetByMachineNameAsync(string machineName)
    {
        return await RequestAsync<ServMachineDto>(nameof(GetByMachineNameAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), machineName }
        });
    }

    public virtual async Task<ServMachineDto> GetByConnectionIdAsync(string connectionId)
    {
        return await RequestAsync<ServMachineDto>(nameof(GetByConnectionIdAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), connectionId }
        });
    }

    public virtual async Task<bool> OnlineAsync(ServMachineOnlineDto online)
    {
        return await RequestAsync<bool>(nameof(OnlineAsync), new ClientProxyRequestTypeValue
        {
            { typeof(ServMachineOnlineDto), online }
        });
    }

    public virtual async Task<bool> OfflineAsync(ServMachineOfflineDto offline)
    {
        return await RequestAsync<bool>(nameof(OfflineAsync), new ClientProxyRequestTypeValue
        {
            { typeof(ServMachineOfflineDto), offline }
        });
    }

    public virtual async Task<ServMachineDto> GetAsync(int id)
    {
        return await RequestAsync<ServMachineDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(int), id }
        });
    }

    public virtual async Task<PagedResultDto<ServMachineDto>> GetListAsync(GetListInput input)
    {
        return await RequestAsync<PagedResultDto<ServMachineDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetListInput), input }
        });
    }

    public virtual async Task<ServMachineDto> CreateAsync(ServMachineCreateInput input)
    {
        return await RequestAsync<ServMachineDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(ServMachineCreateInput), input }
        });
    }

    public virtual async Task<ServMachineDto> UpdateAsync(int id, ServMachineUpdateInput input)
    {
        return await RequestAsync<ServMachineDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(int), id },
            { typeof(ServMachineUpdateInput), input }
        });
    }

    public virtual async Task DeleteAsync(int id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(int), id }
        });
    }
}
